import json
import boto3
from datetime import datetime
from io import StringIO
import pandas as pd

def album(data):
    album_list=[]
    for row in data['items']:
        album_id=row['track']['album']['id']
        album_name=row['track']['album']['name']
        album_release_date=row['track']['album']['release_date']
        album_total_tracks=row['track']['album']['total_tracks']
        album_url=row['track']['album']['external_urls']['spotify']
        album_element={'album_id':album_id,'album_name':album_name,'album_release_date':album_release_date,
                   'album_total_tracks':album_total_tracks,'album_url':album_name}
        album_list.append(album_element)
    return album_list
    
def artist(data):
    artist_list=[]
    for row in data['items']:
        for key,value in row.items():
            if key=='track':
                for artist in value['artists']:
                    artist_element={'artist_id':artist['id'],'artist_name':artist['name'],'external_url':artist['href']}
                    artist_list.append(artist_element)
    return artist_list
    
    
def lambda_handler(event, context):
    s3=boto3.client('s3') 
    Bucket="spotify-etl-new"
    Key="raw_data/to_process/" 
    
    spotify_data=[]
    spotify_key=[]
    for file in s3.list_objects(Bucket=Bucket, Prefix=Key)['Contents']:
        file_key = file['Key']
        print(file_key)
        if file_key.split('.')[-1] =="json":
            response=s3.get_object(Bucket=Bucket,Key=file_key)
            content=response['Body']
            jsonobject=json.loads(content.read())
            spotify_data.append(jsonobject)
            spotify_key.append(file_key)
            print(spotify_data)
            
    for data in spotify_data:
        album_list=album(data)
        artist_list=artist(data)
        
        artist_df=pd.DataFrame(artist_list)
        artist_df=artist_df.drop_duplicates(subset=('artist_id'))
        
        album_df=pd.DataFrame(album_list)
        album_df=album_df.drop_duplicates(subset=('album_id'))
       
        album_key="transform-data/album-data/processed" +str(datetime.now())+".csv"
        album_buffer=StringIO()
        album_df.to_csv(album_buffer,index=False)
        album_content=album_buffer.getvalue()
        s3.put_object(
            Bucket=Bucket,
            Key=album_key,
            Body=album_content
            )
            
        artist_key="transform-data/artist-data/processed" +str(datetime.now())+".csv"
        artist_buffer=StringIO()
        artist_df.to_csv(artist_buffer,index=False)
        artist_content=artist_buffer.getvalue()
        s3.put_object(
            Bucket=Bucket,
            Key=artist_key,
            Body=artist_content
            )
   
    s3_resource = boto3.resource('s3')
    for key in spotify_key:
        copy_source = {
            'Bucket': Bucket,
            'Key': key
        }
        s3_resource.meta.client.copy(copy_source, Bucket, 'raw_data/processed/' + key.split("/")[-1])    
        s3_resource.Object(Bucket, key).delete()
    
            
        

            
        
        
        
        
        
            
    
